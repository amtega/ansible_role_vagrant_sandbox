---
# Tasks for testing role

- name: configure vagrant sandbox environment
  hosts: localhost
  roles:
    - role: amtega.vagrant_presets
      vagrant_presets_boxes_json_query: >-
        [? (starts_with(name, `centos-7`))
           || starts_with(name, `debian-9`)
           || starts_with(name, `fedora-27`)
           || starts_with(name, `fedora-28`) ]
  tags:
    - sandbox

- name: run idempotence test
  hosts: localhost
  roles:
    # The idempotence tests are disabled in the outer vms because is tested
    # later within the inner vms.

    - role: amtega.vagrant_sandbox
      vagrant_sandbox_state: started
      vagrant_provisioner_vm_memory: 1024
      vagrant_sandbox_idempotence_test: false
  tags:
    - sandbox

- name: update kernel in sandbox hosts and reboot them
  hosts: vagrant_sandbox_vms
  roles:
    - amtega.gnu_linux
  tasks:
    - name: update kernel
      package:
        name: "kernel-*"
        state: latest
      notify:
        - reboot host
        - wait host

    - meta: flush_handlers
  tags:
    - prepare

- name: setup software and config requirements in sandbox hosts
  hosts: vagrant_sandbox_vms
  roles:
    - amtega.virtualbox_engine
    - amtega.vagrant_engine
    - amtega.vagrant_presets
  tasks:
    - name: install required packages
      package:
        name: "{{ item }}"
        state: present
      with_items:
        - python-pip
        - sshpass

    - name: install ansible
      pip:
        name: ansible
        state: latest

    - name: create ansible softlink
      file:
        src: /usr/local/bin/ansible-playbook
        dest: /usr/bin/ansible-playbook
        state: link
      when: ansible_facts.distribution | lower == "debian"

    - name: copy playbook to test idempotence
      copy:
        src: idempotence.yml
        dest: /tmp/idempotence.yml

    - name: setup bootstrap playbook
      copy:
        src: bootstrap.yml
        dest: /tmp
        mode: 0600

    - name: configure vagrant_provisioner boxes
      set_fact:
        vagrant_provisioner_boxes:
          - name: centos-6-i386
            address: bento/centos-6.7-i386
            distribution: CentOS
            distribution_version: 6
            playbook: /tmp/bootstrap.yml
            max_provisioning_time: 600
            options:
              - "config.vm.boot_timeout = 600"

    - name: configure vagrant_provisioner virtual machines
      set_fact:
        vagrant_provisioner_vms:
          - name: centos-6-i386-1
            hostname: centos-6-i386-1
            box: centos-6-i386
            memory: 128
            max_provisioning_time: 600
            ansible_user: vagrant
            ansible_ssh_pass: vagrant
            ansible_become: true
            ansible_become_user: root
            ansible_become_method: sudo
            options:
              - "config.vm.boot_timeout = 300"
              - "config.ssh.forward_agent = true"
              - "config.ssh.forward_x11 = true"
              - "config.vm.boot_timeout = 600"
          - name: centos-6-i386-2
            hostname: centos-6-i386-2
            box: centos-6-i386
            memory: 128
            max_provisioning_time: 600
            ansible_user: vagrant
            ansible_ssh_pass: vagrant
            ansible_become: true
            ansible_become_user: root
            ansible_become_method: sudo
            options:
              - "config.vm.boot_timeout = 300"
              - "config.ssh.forward_agent = true"
              - "config.ssh.forward_x11 = true"
              - "config.vm.boot_timeout = 600"

    - name: setup sandbox config for explicit inventory file test 1
      set_fact:
        boxes_inventory_1: "{{ vagrant_provisioner_boxes }}"
        vms_inventory_1: >-
          {{ vagrant_provisioner_vms
             | vagrant_presets_randomize_names }}

    - name: setup sandbox config for explicit inventory file test 2
      set_fact:
        boxes_inventory_2: "{{ vagrant_provisioner_boxes }}"
        vms_inventory_2: >-
          {{ vagrant_provisioner_vms
             | vagrant_presets_randomize_names }}

    - name: setup sandbox config for automatic inventory file tests 1
      set_fact:
        boxes_inventory_3: "{{ vagrant_provisioner_boxes }}"
        vms_inventory_3: >
          {{ vagrant_provisioner_vms
             | vagrant_presets_randomize_names }}

    - name: setup sandbox config for automatic inventory file tests 2
      set_fact:
        boxes_inventory_4: "{{ vagrant_provisioner_boxes }}"
        vms_inventory_4: >
          {{ vagrant_provisioner_vms
             | vagrant_presets_randomize_names }}

    - name: setup sandbox config for automatic inventory file tests 3
      set_fact:
        boxes_inventory_5: "{{ vagrant_provisioner_boxes }}"
        vms_inventory_5: >
          {{ vagrant_provisioner_vms
             | vagrant_presets_randomize_names }}

    - name: setup sandbox config for automatic inventory file tests 4
      set_fact:
        boxes_inventory_6: "{{ vagrant_provisioner_boxes }}"
        vms_inventory_6: >
          {{ vagrant_provisioner_vms
             | vagrant_presets_randomize_names }}

- name: test disabling idempotence check
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_provisioner_mvs_provisioning_method: sequential
      vagrant_sandbox_boxes: "{{ boxes_inventory_1 }}"
      vagrant_sandbox_vms: "{{ vms_inventory_1 }}"
      vagrant_sandbox_state: started
      vagrant_sandbox_inventory: "./vagrant_sandbox_inventory"
      vagrant_sandbox_group: vagrant_sandbox_vms_disable_idempotence
      vagrant_sandbox_idempotence_test: false
      vagrant_sandbox_cleanup_by_ppid: true
      vagrant_sandbox_cleanup_by_user: true
      vagrant_sandbox_cleanup_by_playbook: true
      vagrant_sandbox_cleanup_by_inventory: true

- name: test cleanup by inventory file
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_provisioner_mvs_provisioning_method: sequential
      vagrant_sandbox_boxes: "{{ boxes_inventory_2 }}"
      vagrant_sandbox_vms: "{{ vms_inventory_2 }}"
      vagrant_sandbox_state: started
      vagrant_sandbox_inventory: "./vagrant_sandbox_inventory"
      vagrant_sandbox_group: vagrant_sandbox_vms_cleanup_by_inventory
      vagrant_sandbox_idempotence_test: false
      vagrant_sandbox_cleanup_by_ppid: false
      vagrant_sandbox_cleanup_by_user: false
      vagrant_sandbox_cleanup_by_playbook: false
      vagrant_sandbox_cleanup_by_inventory: true
  tasks:
    - name: search running vagrant vms created by the test
      shell: >-
        vagrant global-status --prune --machine-readable
        | grep "{{ vagrant_sandbox_vms_directory | expanduser }}"
        | cut -f 5 -d','
      changed_when: false
      register: search_test_vms_result

    - name: verify only running vagrant vms are the last ones created
      assert:
        that: >-
          item in vms_inventory_2 | map(attribute='name') | list
      loop: >-
        {{ search_test_vms_result.stdout_lines
           | map("basename")
           | map("trim")
           | list }}

- name: test explicit cleanup with absent state
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_provisioner_mvs_provisioning_method: sequential
      vagrant_sandbox_boxes: "{{ boxes_inventory_2 }}"
      vagrant_sandbox_vms: "{{ vms_inventory_2 }}"
      vagrant_sandbox_state: absent
      vagrant_sandbox_group: vagrant_sandbox_vms_explicit_absent
      vagrant_sandbox_inventory: "./vagrant_sandbox_inventory"
  tasks:
    - name: search running vagrant vms created by the test
      shell: >-
        vagrant global-status --prune --machine-readable
        | grep "{{ vagrant_sandbox_vms_directory | expanduser }}"
        | cut -f 5 -d','
      changed_when: false
      register: search_test_vms_result

    - name: verify there are not running test vagrant vms
      assert:
        that:  search_test_vms_result.stdout_lines | length == 0

    - name: search explicit inventory from previous test
      stat:
        path: "{{ playbook_dir }}/vagrant_sandbox_inventory.tmp"
      register: check_inventory_result

    - name: check explicit inventory from previous test does not exist
      assert:
        that:
          - not check_inventory_result.stat.exists

- name: test enabling recreation after idempotence test
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_provisioner_vms_provisioning_method: sequential
      idempotence_tester_playbook: /tmp/idempotence.yml
      vagrant_sandbox_boxes: "{{ boxes_inventory_3 }}"
      vagrant_sandbox_vms: "{{ vms_inventory_3 }}"
      vagrant_sandbox_state: started
      vagrant_sandbox_group: docker_sandbox_containers
      vagrant_sandbox_idempotence_test: true
      vagrant_sandbox_idempotence_test_recreate_after: true
  tasks:
    - name: assert that idempotence test was ok
      assert:
        that: >-
          vagrant_sandbox_idempotence_result is undefined
          or not vagrant_sandbox_idempotence_result is failed

- name: test that vms were recreated after running idempotence test
  hosts: docker_sandbox_containers
  tasks:
    - name: check /tmp/testfile file
      stat:
        path: /tmp/testfile
      register: check_testfile_result

    - name: check testfile file does not exist
      assert:
        that: not check_testfile_result.stat.exists

- name: refresh inventory
  hosts: vagrant_sandbox_vms
  tasks:
    - meta: refresh_inventory

- name: test disabling vms recreation after idempotence test
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_provisioner_vms_provisioning_method: sequential
      idempotence_tester_playbook: /tmp/idempotence.yml
      vagrant_sandbox_boxes: "{{ boxes_inventory_3 }}"
      vagrant_sandbox_vms: "{{ vms_inventory_3 }}"
      vagrant_sandbox_state: recreated
      vagrant_sandbox_group: docker_sandbox_containers
      vagrant_sandbox_idempotence_test: true
      vagrant_sandbox_idempotence_test_recreate_after: false

- name: test that vms were not recreated after idempotence test
  hosts: docker_sandbox_containers
  tasks:
    - name: check /tmp/testfile file
      stat:
        path: /tmp/testfile
      register: check_testfile_result

    - name: check /tmp/testfile file exists
      assert:
        that: check_testfile_result.stat.exists

    - name: emtpy sandbox boxes and vms facts to prepare next test
      set_fact:
        vagrant_sandbox_boxes: []
        vagrant_sandbox_vms: []

- name: refresh inventory
  hosts: vagrant_sandbox_vms
  tasks:
    - meta: refresh_inventory

- name: test cleanup by ppid
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_provisioner_mvs_provisioning_method: sequential
      vagrant_sandbox_boxes: "{{ boxes_inventory_4 }}"
      vagrant_sandbox_vms: "{{ vms_inventory_4 }}"
      vagrant_sandbox_state: started
      vagrant_sandbox_group: vagrant_sandbox_vms_cleanup_by_ppid
      vagrant_sandbox_idempotence_test: false
      vagrant_sandbox_cleanup_by_ppid: true
      vagrant_sandbox_cleanup_by_user: false
      vagrant_sandbox_cleanup_by_playbook: false
  tasks:
    - name: search running vagrant vms created by the test
      shell: >-
        vagrant global-status --prune --machine-readable
        | grep "{{ vagrant_sandbox_vms_directory | expanduser }}"
        | cut -f 5 -d','
      changed_when: false
      register: search_test_vms_result

    - name: verify only running vagrant vms are the last ones created
      assert:
        that: >-
          item in vms_inventory_4 | map(attribute='name') | list
      loop: >-
        {{ search_test_vms_result.stdout_lines
           | map("basename")
           | map("trim")
           | list }}

- name: test cleanup by user
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_provisioner_mvs_provisioning_method: sequential
      vagrant_sandbox_boxes: "{{ boxes_inventory_5 }}"
      vagrant_sandbox_vms: "{{ vms_inventory_5 }}"
      vagrant_sandbox_state: started
      vagrant_sandbox_group: vagrant_sandbox_vms_cleanup_by_user
      vagrant_sandbox_idempotence_test: false
      vagrant_sandbox_cleanup_by_ppid: false
      vagrant_sandbox_cleanup_by_user: true
      vagrant_sandbox_cleanup_by_playbook: false
  tasks:
    - name: search running vagrant vms created by the test
      shell: >-
        vagrant global-status --prune --machine-readable
        | grep "{{ vagrant_sandbox_vms_directory | expanduser }}"
        | cut -f 5 -d','
      changed_when: false
      register: search_test_vms_result

    - name: verify only running vagrant vms are the last ones created
      assert:
        that: >-
          item in vms_inventory_5 | map(attribute='name') | list
      loop: >-
        {{ search_test_vms_result.stdout_lines
           | map("basename")
           | map("trim")
           | list }}

- name: test cleanup by playbook
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_provisioner_mvs_provisioning_method: sequential
      vagrant_sandbox_boxes: "{{ boxes_inventory_6 }}"
      vagrant_sandbox_vms: "{{ vms_inventory_6 }}"
      vagrant_sandbox_state: started
      vagrant_sandbox_group: vagrant_sandbox_vms
      vagrant_sandbox_idempotence_test: false
      vagrant_sandbox_cleanup_by_ppid: false
      vagrant_sandbox_cleanup_by_user: false
      vagrant_sandbox_cleanup_by_playbook: true
  tasks:
    - name: search running vagrant vms created by the test
      shell: >-
        vagrant global-status --prune --machine-readable
        | grep "{{ vagrant_sandbox_vms_directory | expanduser }}"
        | cut -f 5 -d','
      changed_when: false
      register: search_test_vms_result

    - name: verify only running vagrant vms are the last ones created
      assert:
        that: >-
          item in vms_inventory_6 | map(attribute='name') | list
      loop: >-
        {{ search_test_vms_result.stdout_lines
           | map("basename")
           | map("trim")
           | list }}

- name: cleanup vagrant vagrant sandbox
  hosts: vagrant_sandbox_vms
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_sandbox_boxes: >-
        {{ boxes_inventory_1
           | union(boxes_inventory_2)
           | union(boxes_inventory_3)
           | union(boxes_inventory_4)
           | union(boxes_inventory_5)
           | union(boxes_inventory_6) }}
      vagrant_sandbox_vms: >-
        {{ vms_inventory_1
           | union(vms_inventory_2)
           | union(vms_inventory_3)
           | union(vms_inventory_4)
           | union(vms_inventory_5)
           | union(vms_inventory_6) }}
      vagrant_sandbox_state: absent
  tasks:
    - name: search running vagrant vms
      shell: >-
        vagrant global-status --prune --machine-readable
        | grep "{{ vagrant_sandbox_vms_directory | expanduser }}"
        | cut -f 5 -d','
      changed_when: false
      register: search_test_vms_result

    - name: verify there are not running test vagrant vms
      assert:
       that: >-
         item not in vms_inventory_1
                     | union(vms_inventory_2)
                     | union(vms_inventory_3)
                     | union(vms_inventory_4)
                     | union(vms_inventory_5)
                     | union(vms_inventory_6)
                     | map(attribute='name')
                     | list
      loop: "{{ search_test_vms_result.stdout_lines }}"

- name: cleanup vagrant sandbox
  hosts: localhost
  roles:
    - role: amtega.vagrant_sandbox
      vagrant_sandbox_state: absent
  tags:
    - sandbox
